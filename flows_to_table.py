#!/usr/bin/env python3
"""
flows_to_table_simple.py

Reads an input CSV like:
srcip=... dstip=...,benign
srcip=... dstip=...,Rapid Reset
srcip=... dstip=...,SMA Subscribe Notify

Outputs:
 - table_output.csv : index,srcip,dstip,label,label
 - table_output.tex : LaTeX rows "1 & srcip & dstip & label & label \\"

Usage:
python flows_to_table_simple.py input.csv
"""

import argparse
import re
from pathlib import Path
import pandas as pd

SRC_RE = re.compile(r'srcip=([0-9]{1,3}(?:\.[0-9]{1,3}){3})')
DST_RE = re.compile(r'dstip=([0-9]{1,3}(?:\.[0-9]{1,3}){3})')

def extract_ips(flow_text: str):
    m1 = SRC_RE.search(flow_text)
    m2 = DST_RE.search(flow_text)
    src = m1.group(1) if m1 else ''
    dst = m2.group(1) if m2 else ''
    return src, dst

def read_input_csv(path: Path):
    df = pd.read_csv(path, header=None, dtype=str, keep_default_na=False)
    if df.shape[1] == 1:
        split_df = df[0].str.rsplit(',', n=1, expand=True)
        if split_df.shape[1] == 2:
            df = split_df
        else:
            raise ValueError("Input file couldn't be parsed.")
    df = df.iloc[:, :2]
    df.columns = ['flow_text', 'label']
    df['flow_text'] = df['flow_text'].astype(str).str.strip()
    df['label'] = df['label'].astype(str).str.strip()
    return df

def build_table(df_input: pd.DataFrame):
    rows = []
    for idx, row in enumerate(df_input.itertuples(index=False), start=1):
        flow_text = str(row.flow_text)
        label = str(row.label)
        src, dst = extract_ips(flow_text)
        rows.append({
            'index': idx,
            'srcip': src,
            'dstip': dst,
            'label1': label,
            'label2': label
        })
    return pd.DataFrame(rows)

def write_outputs(df_table: pd.DataFrame, out_prefix: Path):
    csv_out = out_prefix.with_suffix('.csv')
    df_table.to_csv(csv_out, index=False)
    print(f"Wrote {csv_out}")

    tex_out = out_prefix.with_suffix('.tex')
    with open(tex_out, 'w', encoding='utf-8') as f:
        f.write('% LaTeX table rows generated by flows_to_table_simple.py\n')
        for r in df_table.itertuples(index=False):
            src = (r.srcip or '').replace('_', r'\_')
            dst = (r.dstip or '').replace('_', r'\_')
            lbl1 = (r.label1 or '').replace('&', r'\&')
            lbl2 = (r.label2 or '').replace('&', r'\&')
            f.write(f"{r.index} & {src} & {dst} & {lbl1} & {lbl2} \\\\\n")
    print(f"Wrote {tex_out}")

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('input_csv', type=Path, help='Input CSV file (flow_text,label)')
    parser.add_argument('--output-prefix', '-o', type=Path, default=Path('table_output'))
    args = parser.parse_args()

    df_input = read_input_csv(args.input_csv)
    table_df = build_table(df_input)
    write_outputs(table_df, args.output_prefix)

if __name__ == '__main__':
    main()
